@page "/"
@using BlazorApp.Entities

<PageTitle>GreetingService</PageTitle>

@if (greetings == null)
{
    <p class="pad-10"><em>Loading...</em></p>
}
else
{
    @switch (view)
    {
        case View.CreateGreeting:
            <CreateGreeting />
            break;
        case View.ViewGreeting:
            <ReadGreeting onPreviousButtonClicked="Previous"
              onInboxButtonClicked="setInbox"
              onNextButtonClicked="Next"
              previousExists=@previousExists
              nextExists=@nextExists
              greeting=@CurrentGreeting />
            break;
        case View.ListGreetings:
        default:
            <ListGreetings onGreetingClicked="ShowGreeting"
               greetings=@greetings />
            break;
    }
}

@code {
    private View view = View.CreateGreeting;

    HttpClient httpClient { get; set; } = new();
    private string? text { get; set; }
    private string? resultAsString { get; set; }
    private string? ErrorMessage { get; set; }

    public List<Greeting> greetings;

    private bool previousExists { get; set; }
    private bool nextExists { get; set; }

    public Greeting CurrentGreeting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", "a2Fqc2FAYW5rZWJvcmcuY29tOnRlc3Q=");
        await GetPage();
        var comp = new GreetingNewest();
        greetings.Sort(comp);
        view = View.ListGreetings;
    }

    private void ShowGreeting(Guid id)
    {
        CurrentGreeting = greetings.Find(x => x.Id == id);
        
        int index = greetings.IndexOf(CurrentGreeting);
        CurrentGreeting = greetings.ElementAt(index);
        previousExists = index > 0;
        nextExists = index < greetings.Count - 2;
        
        view = View.ViewGreeting;
    }

    private void setInbox()
    {
        view = View.ListGreetings;
    }

    private void Previous()
    {
        int index = greetings.IndexOf(CurrentGreeting) - 1;
        CurrentGreeting = greetings.ElementAt(index);
        previousExists = index > 0;
        nextExists = true;
    }

    private void Next()
    {
        int index = greetings.IndexOf(CurrentGreeting) + 1;
        CurrentGreeting = greetings.ElementAt(index);
        previousExists = true;
        nextExists = index < greetings.Count - 1;
    }

    private async Task GetPage()
    {
        var result = await httpClient.GetAsync("https://helenatestdev.azurewebsites.net/api/greeting");
        resultAsString = await result.Content.ReadAsStringAsync();
        greetings = JsonConvert.DeserializeObject<List<Greeting>>(resultAsString);
        var comp = new GreetingNewest();
        greetings.Sort(comp);
    }
}