@page "/create"
@inject StateService stateService
@implements IDisposable

<PageTitle>Create Greeting</PageTitle>

<h1>Send a greeting!</h1>

@if (!IsSent)
{
    <div class="container">

        <table width="80%">
            <tbody>
                <tr>
                    <td>
                        <div class="form-group">
                            <label for="fromInput">From</label>
                            <input type="text"
                               class="form-control"
                               placeholder=@From
                               id="fromInput"
                               @bind="From" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>

                        <div class="form-group">
                            <label for="toInput">To</label>
                            <input type="text"
                               class="form-control"
                               placeholder="to"
                               id="toInput"
                               @bind=To />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>

                        <div class="form-group">
                            <label for="messageField">Message</label>
                            <textarea id="messageField"
                                  placeholder="write your message here"
                                  class="form-control"
                                  rows="10"
                                  @bind=Message>@From</textarea>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="center">

                        <div class="form-group">
                            <button type="submit"
                                class="btn btn-primary" @onclick=Send>
                                Create
                            </button>
                        </div>
                    </td>
                </tr>

            </tbody>
        </table>
    </div>

    @if (IsError)
    {
        <div class="alert alert-danger">
            @if (ErrorMessage == null)
            {
                <em>Loading...</em>
            }
            else
            {
                @ErrorMessage
            }
        </div>
    }
}
else
{
    <div class="alert alert-success">
        <p>Your message was sent!</p>
        <p>@SuccessMessage</p>
    </div>
    <p><a href="/inbox">Go to inbox</a></p>
    <p><a href="/create">Create another</a></p>

}

@code {
    private string _from;

    public string? From
    {
        get => _from;
        set
        {
            _from = value;
            stateService.CurrentUser = value;
        }
    }

    public string? To { get; set; }
    public string? Message { get; set; }

    private HttpClient HttpClient { get; set; } = new();

    private bool IsSent { get; set; }
    private bool IsError { get; set; }
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }

    private EventHandler eventHandler;

    protected override async Task OnInitializedAsync()
    {
        stateService.OnChange += StateHasChanged;
        IsSent = false;
        IsError = false;
        _from = stateService.CurrentUser;
    }

    private void SetFrom()
    {
        stateService.CurrentUser = From;
    }
    private async Task Send()
    {
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", "a2Fqc2FAYW5rZWJvcmcuY29tOnRlc3Q=");

        ErrorMessage = "";

        if (From == null)
        {
            IsError = true;
            ErrorMessage += "From field can't be empty. <br/> ";
        }
        if (To == null)
        {
            IsError = true;
            ErrorMessage += "To field can't be empty. <br/> ";
        }
        if (Message == null)
        {
            IsError = true;
            ErrorMessage += "Do you really want to send an empty message? <br/>";
        }

        if (From != null && To != null && Message != null)
        {
            IsError = false;
            Greeting g = new Greeting(From, To, Message);
            var result = await HttpClient.PostAsJsonAsync<Greeting>($"https://helenatestdev.azurewebsites.net/api/greeting", g);

            if (!result.IsSuccessStatusCode)
            {
                IsError = true;
                ErrorMessage = await result.Content.ReadAsStringAsync();
            }
            else
            {
                IsSent = true;
            }
        }
    }
    public void Dispose()
    {
        stateService.OnChange -= StateHasChanged;
    }
}