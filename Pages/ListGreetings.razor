@using BlazorApp.Entities
@inject NavigationManager NavigationManager

<PageTitle>Inbox</PageTitle>

<h1>
    Inbox
</h1>
@if (ErrorMessage != null)
{
    <div class="alert alert-warning">@ErrorMessage</div>
}

@if (greetings == null)
{
    <p class="pad-10"><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col" class="d-md-table-cell">&nbsp;</th>
                    <th scope="col" class="d-none d-md-table-cell">From</th>
                    <th scope="col" class="d-none d-md-table-cell">To</th>
                    <th scope="col" class="d-table-cell">Time</th>
                    <th scope="col" class="d-table-cell">&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var greeting in greetings)
                {
                    <tr @onclick="(e => read(greeting.Id))">
                        <td class="d-table-cell">
                            <button class="btn delete-btn"
                            @onclick=@(e => Delete(greeting.Id))>
                                <span class="oi oi-circle-x"
                              aria-hidden="true">
                                </span>
                            </button>
                        </td>
                        <td class="d-none d-md-table-cell">@greeting.From</td>
                        <td class="d-none d-md-table-cell">@greeting.To</td>
                        <td class="d-none d-md-table-cell">@greeting.Timestamp</td>
                        <td class="d-table-cell d-md-none">
                            @if (@greeting.Timestamp.Date == DateTime.Now.Date)
                            {
                                <span>@greeting.Timestamp.Hour:@greeting.Timestamp.Minute</span>
                            }
                            else
                            {
                                <span>@greeting.Timestamp.Year-@greeting.Timestamp.Month-@greeting.Timestamp.Day</span>
                            }
                        </td>
                        <td class="d-table-cell">

                            @greeting.Preview

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public EventCallback<Guid> onGreetingClicked { get; set; }
    [Parameter]
    public List<Greeting> greetings { get; set; }

    HttpClient httpClient { get; set; } = new();
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        greetings = greetings;
        foreach (var g in greetings)
        {
            if (g.Message.Length > 40)
            {
                g.Preview = $"{g.Message.Substring(0, 38)}...";
            }
            else
            {
                g.Preview = g.Message;
            }
        }
    }

    private async Task read(Guid id)
    {
        await onGreetingClicked.InvokeAsync(id);
    }

    private async Task Delete(Guid id)
    {
        var result = await httpClient.DeleteAsync($"https://helenatestdev.azurewebsites.net/api/greeting/a/b/{id}");
        string resultAsString = await result.Content.ReadAsStringAsync();
        if (!result.IsSuccessStatusCode)
        {
            ErrorMessage = await result.Content.ReadAsStringAsync();
        }
    }
}