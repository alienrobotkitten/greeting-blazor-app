@page "/"
@page "/inbox"
@using BlazorApp.Entities
@inject NavigationManager NavigationManager

<PageTitle>Inbox</PageTitle>

<h1>
    Inbox
    <button @onclick="GetPage" class="btn btn-primary margin-10">Check inbox</button>
</h1>
@if (ErrorMessage != null)
{
    <div class="alert alert-warning">@ErrorMessage</div>
}

@if (greetings == null)
{
    <p class="pad-10"><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col" class="d-md-table-cell">&nbsp;</th>
                    <th scope="col" class="d-none d-md-table-cell">From</th>
                    <th scope="col" class="d-none d-md-table-cell">To</th>
                    <th scope="col" class="d-table-cell">Time</th>
                    <th scope="col" class="d-table-cell">&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var greeting in greetings)
                {
                    <tr @onclick="(e => GoTo(greeting.Id))">
                        <td class="d-table-cell">
                            <button class="btn btn-outline-danger"
                            @onclick=@(e => Delete(greeting.Id)) style="padding: 1px; border: 0;">
                                <span class="oi oi-circle-x"
                              aria-hidden="true">
                                </span>
                            </button>
                        </td>
                        <td class="d-none d-md-table-cell">@greeting.From</td>
                        <td class="d-none d-md-table-cell">@greeting.To</td>
                        <td class="d-none d-md-table-cell">@greeting.Timestamp</td>
                        <td class="d-table-cell d-md-none">
                            @if (@greeting.Timestamp.Date == DateTime.Now.Date)
                            {
                                <span>@greeting.Timestamp.Hour:@greeting.Timestamp.Minute</span>
                            }
                            else
                            {
                                <span>@greeting.Timestamp.Year-@greeting.Timestamp.Month-@greeting.Timestamp.Day</span>
                            }
                        </td>
                        <td class="d-table-cell">

                            @greeting.Preview

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    HttpClient httpClient { get; set; } = new();

    private string? text { get; set; }
    private string? resultAsString { get; set; }
    private string? ErrorMessage { get; set; }

    public List<Greeting> greetings;

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", "a2Fqc2FAYW5rZWJvcmcuY29tOnRlc3Q=");
        await GetPage();
    }

    private void GoTo(Guid greetingid)
    {
        NavigationManager.NavigateTo($"/view/a/b/{greetingid}");
    }

    private async Task GetPage()
    {
        var result = await httpClient.GetAsync("https://helenatestdev.azurewebsites.net/api/greeting");
        resultAsString = await result.Content.ReadAsStringAsync();
        greetings = JsonConvert.DeserializeObject<List<Greeting>>(resultAsString);
        var comp = new GreetingNewest();
        greetings.Sort(comp);

        foreach (var g in greetings)
        {
            if (g.Message.Length > 40)
            {
                g.Preview = $"{g.Message.Substring(0, 38)}...";
            }
            else
            {
                g.Preview = g.Message;
            }
        }
    }

    private async Task Delete(Guid id)
    {
        var result = await httpClient.DeleteAsync($"https://helenatestdev.azurewebsites.net/api/greeting/a/b/{id}");
        resultAsString = await result.Content.ReadAsStringAsync();
        if (!result.IsSuccessStatusCode)
        {
            ErrorMessage = await result.Content.ReadAsStringAsync();
        }
        await GetPage();
    }
}